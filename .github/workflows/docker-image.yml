name: BookJS CI/CD Pipeline

on:
  push:
    branches: ["master"]
  workflow_dispatch:  # 添加手动触发选项

env:
  IMAGE_NAME: ${{ secrets.DOCKER_SERVICE }}/xpan/book-js

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.timestamp.outputs.TAG }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
      
      - name: Generate timestamp
        id: timestamp
        run: |
          echo "TAG=$(TZ=Asia/Shanghai date +'%y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.timestamp.outputs.TAG }}
      
      - name: Login to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_SERVICE }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false  # 先构建不推送
          load: true   # 加载到本地 Docker 引擎
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
      
      - name: Push Docker image with retry
        id: docker_push
        run: |
          MAX_RETRIES=5
          RETRY_DELAY=10
          TIMESTAMP_TAG="${{ steps.timestamp.outputs.TAG }}"
          LATEST_TAG="latest"
          REGISTRY="${{ secrets.DOCKER_SERVICE }}"
          REPO="xpan/book-js"
          
          # 定义推送函数
          push_image() {
            local tag=$1
            echo "推送镜像标签: $tag"
            
            for i in $(seq 1 $MAX_RETRIES); do
              echo "尝试 #$i: 推送 $REGISTRY/$REPO:$tag"
              if docker push "$REGISTRY/$REPO:$tag"; then
                echo "✅ 成功推送 $REGISTRY/$REPO:$tag"
                return 0
              else
                echo "❌ 推送失败，等待 $RETRY_DELAY 秒后重试..."
                sleep $RETRY_DELAY
                # 指数退避策略
                RETRY_DELAY=$((RETRY_DELAY * 2))
              fi
            done
            
            echo "❌ 推送失败: 已达到最大重试次数 ($MAX_RETRIES)"
            return 1
          }
          
          # 先推送指定版本标签，再推送 latest 标签
          push_image "$TIMESTAMP_TAG" || exit 1
          push_image "$LATEST_TAG" || exit 1
          
          echo "✅ 所有镜像标签推送成功"

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH Deployment
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: ${{ secrets.HOST_PORT }}
          script: |
            # 部署前置检查
            DEPLOY_DIR="/srv/bookjs"
            COMPOSE_FILE="$DEPLOY_DIR/docker-compose.yaml"
            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            IMAGE_TAG="${{ needs.build-push.outputs.image_tag }}"
            
            echo "=== 开始部署 BookJS (${IMAGE_TAG}) ==="
            
            # 确保目录存在
            sudo mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR || { echo "❌ 无法切换到部署目录"; exit 1; }
            
            # 带错误处理的克隆操作
            if [ ! -d .git ]; then
              echo "初始化代码库..."
              git clone https://github.com/panxuesen/book-js.git . --depth 1 || { echo "❌ 仓库克隆失败"; exit 1; }
            else
              echo "更新代码库..."
              git fetch origin && git reset --hard origin/master || { echo "❌ 代码更新失败"; exit 1; }
            fi
            
            # 验证 compose 文件存在
            if [ ! -f "$COMPOSE_FILE" ]; then
              echo "❌ 缺少 docker-compose 配置文件: $COMPOSE_FILE"
              ls -lah $DEPLOY_DIR
              exit 1
            fi
            
            # 拉取最新镜像，带重试机制
            echo "拉取镜像: ${IMAGE_NAME}:${IMAGE_TAG}..."
            MAX_RETRIES=5
            RETRY_DELAY=5
            
            for i in $(seq 1 $MAX_RETRIES); do
              echo "尝试 #$i: 拉取镜像"
              if docker pull "${IMAGE_NAME}:${IMAGE_TAG}"; then
                echo "✅ 镜像拉取成功"
                # 标记为 latest 以备不时之需
                docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${IMAGE_NAME}:latest"
                break
              else
                echo "❌ 拉取失败，等待 ${RETRY_DELAY} 秒后重试..."
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "❌ 镜像拉取失败: 已达到最大重试次数"
                  echo "尝试使用本地缓存..."
                  if ! docker image inspect "${IMAGE_NAME}:latest" &>/dev/null; then
                    echo "❌ 没有本地镜像可用，部署失败"
                    exit 1
                  fi
                  echo "⚠️ 使用本地缓存的镜像继续部署"
                fi
                sleep $RETRY_DELAY
                RETRY_DELAY=$((RETRY_DELAY * 2))
              fi
            done
            
            # 备份当前配置文件
            cp $COMPOSE_FILE ${COMPOSE_FILE}.bak || echo "⚠️ 无法创建配置备份"
            
            # 修改 compose 文件中的镜像标签
            sed -i "s|image: ${IMAGE_NAME}:latest|image: ${IMAGE_NAME}:${IMAGE_TAG}|g" $COMPOSE_FILE
            
            # 部署命令
            echo "部署服务..."
            if docker stack deploy --compose-file $COMPOSE_FILE --with-registry-auth bookjs_stack; then
              echo "✅ 部署命令执行成功"
            else
              echo "❌ 部署失败，尝试回滚配置..."
              if [ -f "${COMPOSE_FILE}.bak" ]; then
                mv ${COMPOSE_FILE}.bak $COMPOSE_FILE
                docker stack deploy --compose-file $COMPOSE_FILE --with-registry-auth bookjs_stack
              fi
              exit 1
            fi
            
            # 检查部署状态
            echo "等待服务启动..."
            sleep 10
            echo "服务状态:"
            docker stack services bookjs_stack
            
            # 简单验证服务是否可访问
            echo "验证服务..."
            sleep 10
            if curl -s --max-time 5 http://localhost:770/health &>/dev/null; then
              echo "✅ 服务验证成功"
            else
              echo "⚠️ 服务可能尚未就绪，请稍后手动检查"
            fi
            
            echo "=== 部署完成 ==="
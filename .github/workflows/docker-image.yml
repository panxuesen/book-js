name: BookJS CI/CD Pipeline

on:
  push:
    branches: [ "master" ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_SERVICE }}/xpan/book-js

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate timestamp
        id: timestamp
        run: |
          echo "TAG=$(TZ=Asia/Shanghai date +'%y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.timestamp.outputs.TAG }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: SSH Deployment
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: ${{ secrets.HOST_PORT }}
          script: |
            # 部署脚本保持不变...
            DEPLOY_DIR="/srv/bookjs"
            
            # 创建持久化目录结构
            sudo mkdir -p $DEPLOY_DIR/{config,data}
            sudo chown -R $USER:$USER $DEPLOY_DIR
            
            # 创建环境文件
            echo "IMAGE_TAG=${TAG}" | tee $DEPLOY_DIR/config/.env
            
            # 使用正式目录而非临时目录
            cd $DEPLOY_DIR
            
            # 安全克隆（使用SSH密钥更佳）
            git clone --depth 1 https://github.com/panxuesen/book-js.git . || {
              git fetch origin && git reset --hard origin/master
            }
            
            # Swarm模式初始化
            docker swarm init --advertise-addr eth0 2>/dev/null || true
            
            # 带健康检查的部署
            docker stack deploy \
              --compose-file docker-compose.prod.yaml \
              --with-registry-auth \
              bookjs_stack || exit 1
            
            # 清理旧镜像
            docker image prune -af --filter "until=24h"

name: BookJS CI/CD Pipeline

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKER_SERVICE }}/xpan/book-js
  # 设置并行构建参数提高构建速度
  DOCKER_BUILDKIT: 1
  BUILDX_NO_DEFAULT_LOAD: 1

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.timestamp.outputs.TAG }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 浅克隆加速检出
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: |
            image=moby/buildkit:latest
      
      - name: Generate timestamp
        id: timestamp
        run: echo "TAG=$(TZ=Asia/Shanghai date +'%y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
      
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.timestamp.outputs.TAG }}
      
      - name: Login to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_SERVICE }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true  # 直接构建并推送
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: |
            type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
            type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64
          provenance: false  # 减少额外元数据生成
          outputs: type=registry,push-by-digest=true
          # 启用并行构建
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOCKER_BUILDKIT=1
          # 添加额外构建加速参数
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.timestamp.outputs.TAG }}

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: Prepare deployment files
        run: |
          # 创建最小化的部署配置
          mkdir -p deploy
          cat > deploy/docker-compose.yaml <<EOF
          version: '3.8'
          services:
            bookjs:
              image: ${{ env.IMAGE_NAME }}:${{ needs.build-push.outputs.image_tag }}
              deploy:
                replicas: 1
                update_config:
                  parallelism: 1
                  order: start-first
                  failure_action: rollback
              ports:
                - "770:770"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:770/health"]
                interval: 10s
                timeout: 5s
                retries: 3
                start_period: 10s
          EOF
      
      - name: Upload deployment configuration
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: ${{ secrets.HOST_PORT }}
          source: "deploy/docker-compose.yaml"
          target: "/srv/bookjs"
          strip_components: 1
          overwrite: true
      
      - name: Deploy with optimized settings
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: ${{ secrets.HOST_PORT }}
          script: |
            # 简化的部署脚本
            DEPLOY_DIR="/srv/bookjs"
            COMPOSE_FILE="$DEPLOY_DIR/docker-compose.yaml"
            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            IMAGE_TAG="${{ needs.build-push.outputs.image_tag }}"
            
            echo "=== 开始部署 BookJS (${IMAGE_TAG}) ==="
            
            # 预拉取镜像提高部署速度
            echo "拉取镜像: ${IMAGE_NAME}:${IMAGE_TAG}..."
            docker pull "${IMAGE_NAME}:${IMAGE_TAG}" || {
              echo "⚠️ 拉取失败，使用现有镜像继续部署"
            }
            
            # 部署命令
            echo "部署服务..."
            # 使用--prune自动清理不再使用的服务和容器
            docker stack deploy --compose-file $COMPOSE_FILE --with-registry-auth --prune bookjs_stack
            
            # 高效检查部署状态
            echo "检查服务状态..."
            for i in {1..6}; do
              STATUS=$(docker stack services bookjs_stack --format "{{.Name}} {{.Replicas}}" | grep "bookjs" || echo "")
              if [[ "$STATUS" == *"1/1"* ]]; then
                echo "✅ 服务已成功部署: $STATUS"
                exit 0
              fi
              echo "服务部署中: $STATUS (等待5秒...)"
              sleep 5
            done
            
            echo "⚠️ 部署可能需要更长时间，请检查: docker stack ps bookjs_stack"
